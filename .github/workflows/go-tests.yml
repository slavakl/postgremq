name: Go Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'postgremq-go/**'
      - 'mq/sql/**'
      - '.github/workflows/go-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'postgremq-go/**'
      - 'mq/sql/**'
      - '.github/workflows/go-tests.yml'

jobs:
  test:
    name: Test Go Client
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ['1.23', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      working-directory: ./postgremq-go
      run: go mod download

    - name: Run tests
      working-directory: ./postgremq-go
      run: go test -v -race -timeout=20m -coverprofile=coverage.out -covermode=atomic ./...

    # Uncomment to enable Codecov (requires CODECOV_TOKEN secret)
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: ./postgremq-go/coverage.out
    #     flags: go
    #     name: go-${{ matrix.go-version }}
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #     fail_ci_if_error: false

  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v2
        working-directory: postgremq-go
        args: --timeout=5m
